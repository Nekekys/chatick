{"version":3,"sources":["components/Header/Header.jsx","components/Chatik/Okno/Message/MessageMe.jsx","components/Chatik/Okno/Message/Message.jsx","components/Chatik/Okno/Okno.jsx","components/Chatik/Vvod/Vvod.jsx","redux/messageReduser.js","components/Chatik/Chatick.jsx","redux/authReduser.js","components/Chatik/ChatickCon.jsx","components/Users/Users.jsx","components/Login/Login.jsx","components/Login/LoginCon.jsx","components/Header/HeaderCon.jsx","components/Users/UserCon.jsx","App.js","serviceWorker.js","redux/redux_store.js","index.js","images/pepeclown.png"],"names":["Header","props","className","src","logo","alt","userName","MessageMe","name","date","message","Message","Okno","messageElement","messageData","map","id","userKey","uid","nameUser","messageText","dateMassage","VvodReduxForm","reduxForm","form","onSubmit","handleSubmit","onClick","document","getElementById","scrollTop","Field","component","type","Vvod","value","UserId","sendMessageDB","div","setTimeout","initialState","messagevvod","usersReducer","state","action","Chatick","sendMessage","isAuth","user","isAuthChange","sendUser","authReducer","ChatickContainer","firebase","ref","on","elem","kek","val","onAuthStateChanged","prevProps","prevState","snapshot","kek2","e","key","this","clearMessage","userId","getUserName","React","Component","compose","connect","MessageData","AuthData","dispatch","a","Date","Hours","getHours","Minutes","getMinutes","db","meme","push","Users","userElement","users","LoginInReduxForm","RegistrReduxForm","Login","useState","error","setError","editMode","setEditMode","addLoginIn","login","password","signInWithEmailAndPassword","then","console","log","addRegistr","createUserWithEmailAndPassword","uuuser","set","LoginContainer","HeaderContainer","UserContainer","proverOchka","i","App","check","keke","setState","HeaderCon","ChatickCon","LoginCon","UserCon","Boolean","window","location","hostname","match","reducers","combineReducers","messageReducer","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.f38dd48e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../App.css';\r\nimport logo from '../../images/pepeclown.png';\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"Header\">\r\n            <div className=\"Header_main\">\r\n                <div className=\"logo\">\r\n                    <img src={logo} alt=\"\"/>\r\n                </div>\r\n                <div className=\"slogan\">\r\n                    <b>{props.userName} </b>   / Чебуречный чатик\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\n\r\n\r\n\r\nfunction MessageMe(props) {\r\n    return (\r\n        <div className=\"MessageMe_container\">\r\n            <div className=\"MessageMe\">\r\n                <div className=\"Message_name\">\r\n                    <h4>{props.name}</h4>\r\n                    <span>{props.date}</span>\r\n                </div>\r\n                <p>{props.message}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageMe;","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\n\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className=\"Message_container\">\r\n            <div className=\"Message\">\r\n                <div className=\"Message_name\">\r\n                    <h4>{props.name}</h4>\r\n                    <span>{props.date}</span>\r\n                </div>\r\n                <p>{props.message}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport '../../../App.css';\r\nimport MessageMe from \"./Message/MessageMe\";\r\nimport Message from \"./Message/Message\";\r\n\r\n\r\n\r\n\r\nfunction Okno(props) {\r\n\r\n\r\n\r\n\r\n    let messageElement = props.messageData.\r\n    map( message => {\r\n        if(message.id == props.userKey.uid){\r\n            return <MessageMe name={message.nameUser} id={message.id} message={message.messageText} date={message.dateMassage} />\r\n        }else{\r\n            return <Message name={message.nameUser} id={message.id} message={message.messageText} date={message.dateMassage} />\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"Okno\" id=\"dab\">\r\n            {messageElement}\r\n\r\n            {/*<MessageMe message={message} />\r\n            <Message message={message} />*/}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Okno;","import React from 'react';\r\nimport '../../../App.css';\r\nimport logo from '../../../images/pepeclown.png';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport handleSubmit from \"redux-form/lib/handleSubmit\";\r\nimport * as firebase from \"firebase\";\r\n\r\n\r\n\r\nfunction VvodForm(props) {\r\n    const pepeClown = () => {\r\n        let div = document.getElementById('dab');\r\n        div.scrollTop += 10000;\r\n\r\n    }\r\n\r\n    return (\r\n        <form className=\"Vvod\" onSubmit={props.handleSubmit}>\r\n            <img onClick={pepeClown} src={logo} alt=\"\" className=\"vvod_pepe\"/>\r\n            <Field  component={\"textarea\"} name={\"message\"}  className=\"vvod_vvod_input\" type=\"text\"/>\r\n            <button /*onClick={props.handleSubmit}*/ className=\"vvod_send\">Отправить</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst VvodReduxForm = reduxForm({\r\n    form: 'message'\r\n})(VvodForm)\r\n\r\n\r\nfunction Vvod(props) {\r\n\r\n\r\n\r\n\r\n    const addNewMessage = (value) =>{\r\n        if(value.message != null){\r\n            let UserId = props.userKey.uid;\r\n            let name = props.userName;\r\n            props.sendMessageDB(value.message,UserId,name);\r\n            value.message = '';\r\n\r\n            let div = document.getElementById('dab');\r\n            setTimeout(function () {\r\n                div.scrollTop += 10000;\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <VvodReduxForm onSubmit={addNewMessage} />\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Vvod;","import * as firebase from \"firebase\";\r\n\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\nconst GET_MESSAGE = 'GET_MESSAGE';\r\nconst CLEAR_MAESSAGE = 'CLEAR_MAESSAGE';\r\n\r\nlet initialState = {\r\n    messageData: [\r\n        /* {id: 1, nameUser: \"san\", messageText: \"soso biby\", dateMassage: \"15.05\"},\r\n          {id: 2, nameUser: \"kek\", messageText: \"privet bruhh\", dateMassage: \"15.05\"}\r\n          /* {id: 2, nameUser: \"kek\", massegeText: \"privet bruhh\", dateMassage: \"15.05\"},\r\n          {id: 2, nameUser: \"kek\", massegeText: \"privet bruhh\", dateMassage: \"15.05\"}*/\r\n    ],\r\n    /*followingInProgress: [1,2]*/\r\n    messagevvod: ''\r\n\r\n}\r\n\r\n\r\n\r\nconst usersReducer = (state = initialState, action) =>  {\r\n\r\n\r\n    switch (action.type) {\r\n        case  SEND_MESSAGE:\r\n            let message = action.message;\r\n            let id = action.id;\r\n            let name = action.name;\r\n            let date = action.date;\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData ,  {id: id, nameUser: name, messageText: message, dateMassage: date}]\r\n            }\r\n        case  CLEAR_MAESSAGE:\r\n            return {\r\n                ...state,\r\n                messageData: []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n\r\n\r\nexport let sendMessage = (message,id,name,date) =>{\r\n\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        message,id,name,date\r\n    }\r\n}\r\nexport let clearMessage = () =>{\r\n\r\n    return {\r\n        type: CLEAR_MAESSAGE\r\n    }\r\n}\r\n/*export let sendMessageDB = (message,id,name) =>{\r\n    const db = firebase.database();\r\n    db.ref('Message').push('1')\r\n}*/\r\nexport const sendMessageDB = (message,id,name) => {\r\n    return async (dispatch) => {\r\n        let date = new Date();\r\n        let Hours = date.getHours();\r\n        let Minutes = date.getMinutes();\r\n        const db = firebase.database();\r\n        let meme = {\r\n            userId: id,\r\n            name: name,\r\n            messageText: message,\r\n            dateMassage: Hours + ':'+ Minutes\r\n        }\r\n        await db.ref('Message').push(meme)\r\n    }\r\n}\r\n\r\n\r\nexport  default usersReducer;","import React from 'react';\r\nimport '../../App.css';\r\nimport Okno from \"./Okno/Okno\";\r\nimport Vvod from \"./Vvod/Vvod\";\r\nimport {scrollEl} from \"../../redux/messageReduser\";\r\n\r\n\r\n\r\nfunction Chatick(props) {\r\n\r\n    return (\r\n        <div className=\"Chatick\">\r\n            <Okno messageData={props.messageData} userKey={props.userKey}/>\r\n            <Vvod sendMessage={props.sendMessage} sendMessageDB={props.sendMessageDB} userName={props.userName} userKey={props.userKey}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chatick;","\r\nconst IS_AUTH = 'IS_AUTH';\r\nconst SEND_USER = 'SEND_USER';\r\nconst GET_USER_NAME = 'GET_USER_NAME';\r\n\r\n\r\nlet initialState = {\r\n    isAuth: false,\r\n    user: [\r\n       {uid: '1'}\r\n    ],\r\n    userName: ''\r\n\r\n}\r\n\r\n\r\n\r\nconst authReducer = (state = initialState, action) =>  {\r\n\r\n\r\n    switch (action.type) {\r\n        case  IS_AUTH:\r\n            return {\r\n                isAuth: true\r\n            }\r\n        case  SEND_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        case  GET_USER_NAME:\r\n            return {\r\n                ...state,\r\n                userName: action.name\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n\r\n\r\nexport let isAuthChange = () =>{\r\n    return {\r\n        type: IS_AUTH\r\n    }\r\n}\r\nexport let getUserName = (name) =>{\r\n    return {\r\n        type: GET_USER_NAME,\r\n        name\r\n    }\r\n}\r\n\r\nexport let sendUser = (user) =>{\r\n    return {\r\n        type: SEND_USER,\r\n        user\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport  default authReducer;","import React from 'react';\r\nimport '../../App.css';\r\nimport Chatick from \"./Chatick\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {clearMessage, sendMessage, sendMessageDB} from \"../../redux/messageReduser\";\r\nimport * as firebase from \"firebase\";\r\nimport {getUserName, isAuthChange, sendUser} from \"../../redux/authReduser\";\r\n\r\n\r\nclass ChatickContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const db = firebase.database();\r\n        let message = db.ref('Message')\r\n        message.on('value', (elem) => {\r\n            this.kek(elem.val())\r\n        })\r\n\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            this.props.sendUser(user)\r\n        });\r\n        /*let userN = db.ref('User')\r\n        userN.on('value', (elem) => {\r\n            this.kek2(elem.val())\r\n        })*/\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const db = firebase.database();\r\n        let userN = db.ref('User')\r\n        userN.on('value', (elem) => {\r\n            this.kek2(elem.val())\r\n        })\r\n    }\r\n\r\n    kek(e) {\r\n        this.props.clearMessage()\r\n        for (let key in e) {\r\n            this.props.sendMessage(e[key].messageText, e[key].userId, e[key].name, e[key].dateMassage)\r\n        }\r\n    }\r\n\r\n    kek2(e) {\r\n        for (let key in e){\r\n            if(key == this.props.userKey.uid){\r\n                this.props.getUserName(e[key].name)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Chatick  messageData={this.props.messageData} sendMessage={this.props.sendMessage} sendMessageDB={this.props.sendMessageDB} userKey={this.props.userKey} userName={this.props.userName}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messageData: state.MessageData.messageData,\r\n        userKey: state.AuthData.user,\r\n        userName: state.AuthData.userName\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {\r\n        sendMessage,sendMessageDB,isAuthChange,sendUser,clearMessage,getUserName\r\n    })\r\n)(ChatickContainer)","import React from 'react';\r\nimport '../../App.css';\r\nimport MessageMe from \"../Chatik/Okno/Message/MessageMe\";\r\nimport Message from \"../Chatik/Okno/Message/Message\";\r\n\r\n\r\n\r\nfunction Users(props) {\r\n    let userElement = props.users.\r\n    map( user => {\r\n        if(user == props.userName){\r\n            return <span> <b>{user}</b>  </span>\r\n        }else {\r\n            return <span> {user} </span>\r\n        }\r\n\r\n    });\r\n\r\n    return (\r\n        <div className=\"User\">\r\n            <h2>Чебуретяне:</h2>\r\n            {userElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import React, {useState} from 'react';\r\nimport '../../App.css';\r\nimport logo from \"../../images/pepeclown.png\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport * as firebase from \"firebase\";\r\nimport {sendUserNameOfReg} from \"../../redux/authReduser\";\r\n\r\n\r\n\r\n/*let error = false;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction LoginInForm (props) {\r\n\r\n    return (\r\n        <form className=\"LoginIn\" onSubmit={props.handleSubmit}>\r\n            <span>Логин:</span>\r\n            <Field  component={\"input\"} name={\"login\"}  className=\"LoginIn_input_login\" type=\"text\"/>\r\n            <span>Пароль:</span>\r\n            <Field  component={\"input\"} name={\"password\"}  className=\"LoginIn_input_password\" type=\"password\"/>\r\n            <button /*onClick={props.handleSubmit}*/ className=\"LoginIn_Button\">Отправить</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst LoginInReduxForm = reduxForm({\r\n    form: 'loginIn'\r\n})(LoginInForm)\r\n\r\n\r\n\r\nfunction RegistrForm (props) {\r\n\r\n\r\n    return (\r\n        <form className=\"LoginIn\" onSubmit={props.handleSubmit}>\r\n            <span>Введите Почту:</span>\r\n            <Field  component={\"input\"} name={\"login\"}  className=\"LoginIn_input_login\" type=\"text\"/>\r\n            <span>Придумайте ник:</span>\r\n            <Field  component={\"input\"} name={\"name\"}  className=\"LoginIn_input_mail\" type=\"text\"/>\r\n            <span>Придумайте пароль:</span>\r\n            <Field  component={\"input\"} name={\"password\"}  className=\"LoginIn_input_password\" type=\"password\"/>\r\n            <button /*onClick={props.handleSubmit}*/ className=\"LoginIn_Button\">Отправить</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst RegistrReduxForm = reduxForm({\r\n    form: 'Registr'\r\n})(RegistrForm)\r\n\r\n\r\nfunction Login (props) {\r\n\r\n    const [error, setError] = useState(false);\r\n    const erorClose = () => {\r\n        setError(false)\r\n    }\r\n\r\n\r\n    let [editMode,setEditMode] =  useState(false);\r\n\r\n    const otrisovka = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n\r\n    const addLoginInValid = (value) =>{\r\n        let login = value.login;\r\n        let password = value.password;\r\n        if((login != null) && (password != null)){\r\n            addLoginIn(value)\r\n        }else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addLoginIn = (value) => {\r\n\r\n        let login = value.login;\r\n        let password = value.password;\r\n        firebase.auth().signInWithEmailAndPassword(login,password)\r\n            .then(\r\n                error => {\r\n                    console.log(error);\r\n                    props.isAuthChange();\r\n                }\r\n            )\r\n\r\n\r\n    }\r\n    const addRegistrValid = (value) =>{\r\n        let login = value.login;\r\n        let password = value.password;\r\n        let name = value.name;\r\n        if((login != null) && (password != null) && (name != null)){\r\n            addRegistr(value)\r\n        }else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const addRegistr = (value) => {\r\n        let login = value.login;\r\n        let password = value.password;\r\n        let name = value.name;\r\n        firebase.auth().createUserWithEmailAndPassword(login,password)\r\n            .then(\r\n                error => {\r\n                    console.log(error);\r\n                    props.isAuthChange();\r\n                }\r\n            )\r\n        let uuuser = [];\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            console.log(user)\r\n            uuuser = user\r\n        });\r\n        const timeFun = () => {\r\n            let userId = uuuser.uid\r\n            /*db.ref('User/'+userId ).push(naname)*/\r\n            firebase.database().ref('User/'+userId ).set({\r\n                name: name\r\n            })\r\n        }\r\n        setTimeout(\r\n            timeFun\r\n        , 2000)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Login\">\r\n            <div className=\"login_con\">\r\n                <h1> {!editMode ? \"Залогинься\" : \"Регистрация\"}</h1>\r\n                {(error) && <div className=\"error\">атата <div className=\"error_x\" onClick={erorClose}>x</div></div>}\r\n                {!editMode ?\r\n                    <LoginInReduxForm onSubmit={addLoginInValid}/>\r\n                    :\r\n                    <RegistrReduxForm  onSubmit={addRegistrValid}/>}\r\n               {/* {!editMode ? <span onClick={otrisovka}>LoginIn</span> : <span onClick={otrisovka}>Register</span>}*/}\r\n                <span onClick={otrisovka}>\r\n                    {!editMode ? \"Регистрация\" : \"Вход\"}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport '../../App.css';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Login from \"./Login\";\r\nimport {isAuthChange} from \"../../redux/authReduser\";\r\n\r\n\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Login isAuth={this.props.isAuth} isAuthChange={this.props.isAuthChange} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.MessageData.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {\r\n        isAuthChange\r\n    })\r\n)(LoginContainer)","import React from 'react';\r\nimport '../../App.css';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport * as firebase from \"firebase\";\r\nimport Header from \"./Header\";\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header  userName={this.props.userName}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        userName: state.AuthData.userName\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {\r\n\r\n    })\r\n)(HeaderContainer)","import React from 'react';\r\nimport '../../App.css';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport * as firebase from \"firebase\";\r\nimport Users from \"./Users\";\r\n\r\n\r\n\r\nclass UserContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {users: []};\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const db = firebase.database();\r\n        let users = db.ref('User')\r\n        users.on( 'value', (elem) => {\r\n            this.proverOchka(elem.val())\r\n        })\r\n\r\n    }\r\n    proverOchka(e){\r\n\r\n        let i = -1;\r\n        for (let key in e){\r\n            i++\r\n            this.state.users[i] = e[key].name\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Users  userName={this.props.userName} users={this.state.users}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        userName: state.AuthData.userName\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {\r\n\r\n    })\r\n)(UserContainer)","import React, {useState} from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport ChatickContainer from \"./components/Chatik/ChatickCon\";\nimport Users from \"./components/Users/Users\";\n\nimport LoginContainer from \"./components/Login/LoginCon\";\n\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {isAuthChange, sendUser} from \"./redux/authReduser\";\nimport * as firebase from \"firebase\";\nimport HeaderContainer from \"./components/Header/HeaderCon\";\nimport UserContainer from \"./components/Users/UserCon\";\n\n\n/*function App(props){\n\n    let [isAuth,isAuthChange2] =  useState(props.store.getState().MessageData.isAuth);\n\n        return (\n            <div className=\"App\">\n                <div className=\"App_container\">\n                    <Header/>\n                    {isAuth ?\n                        <ChatickContainer/>\n                        :\n                        <LoginContainer/>}\n\n                    <Users/>\n                </div>\n            </div>\n        );\n\n}\n\nexport default App*/\n\nclass App extends React.Component {\n    /*componentDidMount() {\n        this.props.isAuthChange()\n    }*/\n    constructor(props) {\n        super(props);\n        this.state = {check: false};\n    }\n\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(function(user) {\n            if (user) {\n                keke()\n            } else {\n\n            }\n\n        });\n        let keke = () => {\n            this.setState({\n                check: true\n            })\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.state.check == true){\n            this.props.isAuthChange()\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App_container\">\n                    <HeaderContainer/>\n                    {\n                        (this.props.isAuth) ?\n                            <ChatickContainer/>\n                      :\n                            <LoginContainer />\n\n                    }\n\n\n\n                    <UserContainer/>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.AuthData.isAuth\n\n    }\n};\n\n\n\nexport default compose(connect(mapStateToProps , {isAuthChange,sendUser}))(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport messageReducer from \"./messageReduser.js\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport authReducer from \"./authReduser\";\r\n\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    MessageData: messageReducer,\r\n    AuthData: authReducer,\r\n    form: formReducer\r\n\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,  composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux_store\";\nimport * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCDItrogtHgLsXn8IFUzkWSOf_OGnUnilc\",\n    authDomain: \"my-chatik-ee6a9.firebaseapp.com\",\n    databaseURL: \"https://my-chatik-ee6a9.firebaseio.com\",\n    projectId: \"my-chatik-ee6a9\",\n    storageBucket: \"my-chatik-ee6a9.appspot.com\",\n    messagingSenderId: \"681904038831\",\n    appId: \"1:681904038831:web:5d17cd004a5c09d40d855a\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pepeclown.ea1f9ac3.png\";"],"sourceRoot":""}